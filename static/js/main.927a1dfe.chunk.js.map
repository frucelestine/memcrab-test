{"version":3,"sources":["components/MatrixTable/ResultTable.jsx","redux/table/tableAction.jsx","redux/table/tableTypes.jsx","components/inputForm/InputValues.jsx","redux/table/tableReducer.jsx","redux/store.jsx","App.js","serviceWorker.js","index.js"],"names":["connect","state","row","column","show","dispatch","createTable","type","props","className","tab","handleRow","handleColumn","handleShow","ownProps","columnChange","e","action","val","target","value","rowChanged","showChanged","handleDelete","handleAdd","autoComplete","style","minWidth","justifyContent","width","htmlFor","id","onChange","table","i","children","total","j","random","Math","floor","push","key","reduce","a","b","drawTable","display","onClick","initialState","tableReducer","parseInt","store","createStore","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.927a1dfe.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { handleColumn, handleRow, handleShow } from '../../redux';\r\n\r\nconst ResultTable = (props) => {\r\n\r\n  return (\r\n    <>\r\n      <table className=\"table table-bordered table-dark container\">\r\n        <tbody>\r\n          {props.tab}\r\n        </tbody>\r\n      </table>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        row: state.row,\r\n        column: state.column,\r\n        show: state.show\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createTable: () => dispatch(handleColumn(), handleRow(), handleShow())\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultTable)\r\n","import { ENTER_ROW, ENTER_COLUMN, ENTER_SHOW } from \"./tableTypes\";\r\n\r\nexport const handleRow = () => ({\r\n  type: ENTER_ROW,\r\n});\r\n\r\nexport const handleColumn = () => {\r\n  return {\r\n    type: ENTER_COLUMN,\r\n  };\r\n};\r\n\r\nexport const handleShow = () => {\r\n  return {\r\n    type: ENTER_SHOW,\r\n  };\r\n};\r\n","export const ENTER_ROW = 'ENTER_ROW';\r\nexport const ENTER_COLUMN = 'ENTER_COLUMN';\r\nexport const ENTER_SHOW = 'ENTER_SHOW'","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ResultTable from \"../MatrixTable/ResultTable\";\r\n\r\nconst InputValues = (props) => {\r\n\r\n  const drawTable = () => {\r\n    let table = [];\r\n\r\n    for (let i = 0; i < props.row; i++) {\r\n      let children = [];\r\n      let foot = [];\r\n      const total = [];\r\n      for (let j = 0; j < props.column; j++) {\r\n        const random = Math.floor(Math.random() * (999 - 100 + 1) + 100);\r\n        children.push(\r\n          <>\r\n            <td key={j}>{random}</td>\r\n          </>\r\n        );\r\n        total.push(random);\r\n        \r\n      }\r\n      table.push(\r\n        <tr key={i}>\r\n          {children}\r\n          <td>Total : {total.reduce((a, b) => a + b, 0)}</td>\r\n        </tr>\r\n      );\r\n    }\r\n\r\n    return table;\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h3>Enter values</h3>\r\n      <form\r\n        autoComplete=\"off\"\r\n        className=\"d-flex\"\r\n        style={{ minWidth: 500, justifyContent: \"space-between\" }}\r\n      >\r\n        <div className=\"form-group\" style={{ width: 100 }}>\r\n          <label htmlFor=\"row\">Enter number of rows</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            value={props.row}\r\n            id=\"row\"\r\n            onChange={props.rowChanged}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\" style={{ width: 100 }}>\r\n          <label htmlFor=\"column\">Enter number of columns</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"column\"\r\n            value={props.column}\r\n            onChange={props.columnChange}\r\n          />\r\n        </div>\r\n        <div className=\"form-group\" style={{ width: 100 }}>\r\n          <label htmlFor=\"show\">Enter value to show</label>\r\n          <input\r\n            type=\"number\"\r\n            className=\"form-control\"\r\n            id=\"show\"\r\n            value={props.show}\r\n            onChange={props.showChanged}\r\n          />\r\n        </div>\r\n      </form>\r\n\r\n      <ResultTable tab={drawTable()} />\r\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}><button className=\"btn btn-primary\" onClick={props.handleAdd}>ADD ROW</button><button className=\"btn btn-danger\" onClick={props.handleDelete}>DELETE ROW</button></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    row: state.handleRow,\r\n    column: state.handleColumn,\r\n    show: state.handleShow,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    columnChange: (e) => {\r\n      const action = { type: \"ENTER_COLUMN\", val: e.target.value };\r\n      dispatch(action);\r\n    },\r\n    rowChanged: (e) => {\r\n      const action = { type: \"ENTER_ROW\", val: e.target.value };\r\n      dispatch(action);\r\n    },\r\n    showChanged: (e) => {\r\n      const action = { type: \"ENTER_SHOW\", val: e.target.value };\r\n      dispatch(action);\r\n    },\r\n    handleDelete: () => {\r\n      const action = { type: \"DELETE_ROW\", val: 1 };\r\n      dispatch(action);\r\n    },\r\n    handleAdd: () => {\r\n      const action = { type: \"ADD_ROW\", val: 1 };\r\n      dispatch(action);\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputValues);\r\n","// import { ENTER_ROW, ENTER_COLUMN, ENTER_SHOW } from \"./tableTypes\";\r\nimport { handleRow } from \"./tableAction\";\r\n\r\nconst initialState = {\r\n  handleRow: \"0\",\r\n  handleColumn: \"\",\r\n  handleShow: \"\",\r\n};\r\n\r\nconst tableReducer = (state = initialState, action) => {\r\n  \r\n  switch (action.type) {\r\n    case \"ENTER_ROW\":\r\n      return {\r\n        ...state,\r\n        handleRow: action.val,\r\n      };\r\n\r\n    case \"ENTER_COLUMN\":\r\n      return {\r\n        ...state,\r\n        handleColumn: action.val,\r\n      };\r\n\r\n    case \"ENTER_SHOW\":\r\n      return {\r\n        ...state,\r\n        handleShow: action.val,\r\n      };\r\n      case \"ADD_ROW\":\r\n      return {\r\n        ...state,\r\n        handleRow: parseInt(state.handleRow) + parseInt(action.val),\r\n      };\r\n      case \"DELETE_ROW\":\r\n      return {\r\n        ...state,\r\n        handleRow: parseInt(state.handleRow) - parseInt(action.val),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default tableReducer;\r\n","import { createStore } from 'redux';\r\nimport tableReducer from './table/tableReducer';\r\n\r\nconst store = createStore(tableReducer);\r\n\r\nexport default store;","import React from \"react\";\r\nimport InputValues from \"./components/inputForm/InputValues\";\r\nimport ResultTable from \"./components/MatrixTable/ResultTable\";\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n    <Provider store={store}>\r\n    <InputValues />\r\n    </Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}